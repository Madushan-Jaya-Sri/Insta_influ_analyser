name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set environment variables
      id: env_vars
      run: |
        # Set environment based on branch/ref
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "ENV=production" >> $GITHUB_ENV
        else
          echo "ENV=staging" >> $GITHUB_ENV
        fi
        
        # Set timestamp for version tracking
        echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
        
    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.AWS_SSH_KEY }}
        
    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.AWS_HOST }}
        EC2_USER: ${{ secrets.AWS_USERNAME }}
      run: |
        # Create archive of application code (excluding unnecessary files)
        tar --exclude="venv" --exclude=".git" --exclude="__pycache__" \
            --exclude="*.pyc" --exclude=".env" --exclude=".env.*" \
            --exclude="*.db" --exclude="app/data/sessions" \
            -czf /tmp/app.tar.gz .
            
        # Transfer application code to EC2
        scp -o StrictHostKeyChecking=no /tmp/app.tar.gz $EC2_USER@$EC2_HOST:/tmp/app.tar.gz
        
        # Create deployment script
        cat > deploy_script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Create application directory if it doesn't exist
        mkdir -p ~/insta_influencer_analyzer
        cd ~/insta_influencer_analyzer
        
        # Extract the application code
        tar -xzf /tmp/app.tar.gz -C .
        
        # Create docker-compose directory if it doesn't exist
        mkdir -p ./nginx/ssl
        
        # Create .env file for production
        cat > .env << EOT
        FLASK_ENV=${{ env.ENV }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
        EOT
        
        # Create or update docker-compose file
        cat > docker-compose.yml << EOT
        version: '3.8'
        
        services:
          app:
            build:
              context: .
              dockerfile: Dockerfile
            container_name: insta_analyzer_app
            restart: always
            expose:
              - "8000"
            volumes:
              - app_data:/app/app/data
              - app_uploads:/app/app/uploads
              - app_static:/app/app/static/images
            env_file:
              - .env
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
            networks:
              - app_network
        
          nginx:
            image: nginx:alpine
            container_name: insta_analyzer_nginx
            restart: always
            ports:
              - "80:80"
            volumes:
              - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
              - app_static:/var/www/static:ro
            depends_on:
              - app
            networks:
              - app_network
        
        networks:
          app_network:
            driver: bridge
        
        volumes:
          app_data:
            driver: local
          app_uploads:
            driver: local
          app_static:
            driver: local
        EOT
        
        # Create nginx.conf if it doesn't exist
        mkdir -p nginx
        cat > nginx/nginx.conf << EOT
        server {
            listen 80;
            server_name _;
        
            location / {
                proxy_pass http://app:8000;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
            }
        
            location /static/ {
                alias /var/www/static/;
                expires 30d;
            }
        
            client_max_body_size 20M;
        }
        EOT
        
        # Build and deploy with docker-compose
        docker-compose down
        docker-compose build --no-cache
        docker-compose up -d
        
        # Cleanup
        docker system prune -af --volumes
        docker image prune -af
        rm -f /tmp/app.tar.gz
        EOF
        
        # Transfer and execute the deployment script
        chmod +x deploy_script.sh
        scp -o StrictHostKeyChecking=no deploy_script.sh $EC2_USER@$EC2_HOST:~/deploy_script.sh
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "chmod +x ~/deploy_script.sh && ~/deploy_script.sh && rm ~/deploy_script.sh"

    - name: Verify deployment
      env:
        EC2_HOST: ${{ secrets.AWS_HOST }}
        EC2_USER: ${{ secrets.AWS_USERNAME }}
      run: |
        sleep 10
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "docker ps && docker logs insta_analyzer_app --tail 20"
        echo "âœ… Deployment completed successfully!"
        echo "Application should be accessible at: http://${{ secrets.AWS_HOST }}" 