name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "=========================================================="
            echo "PHASE 1: BUILD SETUP"
            echo "=========================================================="
            
            # Set up working directories
            WORK_DIR="$HOME/insta_analyzer"
            DATA_DIR="$HOME/insta_analyzer_data"
            
            # Clean up previous deployment data
            echo "Cleaning previous deployment data..."
            sudo rm -rf "$WORK_DIR"
            mkdir -p "$WORK_DIR"
            
            # Ensure data directory exists with proper permissions
            sudo mkdir -p "$DATA_DIR/static/images/brand"
            sudo mkdir -p "$DATA_DIR/static/images/profiles"
            sudo mkdir -p "$DATA_DIR/static/images/posts"
            sudo mkdir -p "$DATA_DIR/uploads"
            sudo mkdir -p "$DATA_DIR/data"
            sudo mkdir -p "$DATA_DIR/logs"
            sudo chown -R $(whoami):$(whoami) "$DATA_DIR"
            sudo chmod -R 777 "$DATA_DIR"
            
            # Clone fresh repository
            cd "$WORK_DIR"
            echo "Cloning repository..."
            git clone https://github.com/Madushan-Jaya-Sri/Insta_influ_analyser.git .
            if [ ! -d app ]; then
              echo "ERROR: Repository cloning failed!"
              exit 1
            fi
            
            # Create the core project files
            echo "Setting up core project files..."
            
            # Create docker-compose.yml for production
            cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ${HOME}/insta_analyzer_data/static:/app/app/static
      - ${HOME}/insta_analyzer_data/uploads:/app/app/uploads
      - ${HOME}/insta_analyzer_data/data:/app/app/data
      - ${HOME}/insta_analyzer_data/logs:/app/logs
    environment:
      - FLASK_APP=wsgi:application
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    command: /start.sh
EOF
            
            # Create .env file with secrets
            echo "Creating .env file..."
            cat > .env << EOF
SECRET_KEY=${{ secrets.SECRET_KEY }}
OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
EOF
            
            # Update nginx.conf to use port 8001
            cat > nginx.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    
    # Serve static files directly
    location /static/ {
        alias /app/app/static/;
        expires 30d;
        try_files $uri =404;
        add_header Cache-Control "public, max-age=31536000";
    }
    
    location /uploads/ {
        alias /app/app/uploads/;
        expires 30d;
    }
    
    # Everything else to Flask app
    location / {
        proxy_pass http://127.0.0.1:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 300s;
        proxy_read_timeout 300s;
    }
}
EOF

            # Update start.sh script to use port 8001
            sed -i 's/--bind 127.0.0.1:8000/--bind 127.0.0.1:8001/g' start.sh
            chmod +x start.sh
            
            # Create the centralized database module
            cat > app/database.py << 'EOF'
"""Database initialization module to prevent circular imports."""

from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

# Initialize extensions without app context
db = SQLAlchemy()
migrate = Migrate()

def init_db(app):
    """Initialize database with Flask app."""
    db.init_app(app)
    migrate.init_app(app, db)
    
    # Create all tables
    with app.app_context():
        db.create_all()
EOF
                        
            # Fix auth.py file if it exists 
            if [ -f app/routes/auth.py ]; then
              echo "Fixing circular imports in auth.py..."
              sed -i 's/from run import db/from app.database import db/g' app/routes/auth.py
            fi
            
            echo "=========================================================="
            echo "PHASE 2: BUILD AND DEPLOY"
            echo "=========================================================="
            
            # Remove unnecessary files
            echo "Removing unnecessary files..."
            rm -f fix_*.sh
            rm -f emergency_fix.py
            rm -f fixed_auth.py
            
            # Make sure Docker and Docker Compose are installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, please install Docker first"
              exit 1
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing docker-compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Stop running containers
            echo "Stopping any running containers..."
            docker-compose down || true
            
            # Build the Docker image
            echo "Building Docker image..."
            docker-compose build --no-cache
            
            # Start the containers
            echo "Starting Docker containers..."
            docker-compose up -d
            
            # Check if containers are running
            echo "Verifying deployment..."
            sleep 10
            if docker-compose ps | grep -q "Up"; then
              echo "✅ Deployment successful! Application is running at http://13.126.220.175/"
            else
              echo "❌ Deployment failed!"
              docker-compose logs
              exit 1
            fi
            
            echo "Deployment complete! Your application is now available at http://13.126.220.175/"
