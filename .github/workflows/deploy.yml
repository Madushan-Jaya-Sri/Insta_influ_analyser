name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Updated deployment to use nginx.conf from repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "Starting deployment process..."
            
            # Remove existing directory entirely for a clean start
            rm -rf ~/Insta_influ_analyser
            echo "Removed existing repository directory"
            
            # Fresh clone of the repository
            git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git ~/Insta_influ_analyser
            cd ~/Insta_influ_analyser
            echo "Repository freshly cloned"
            
            # Fix ipython version in requirements.txt
            sed -i 's/ipython==9.1.0/ipython==8.18.1/g' requirements.txt
            
            # Fix static directory structure - merge static directories if needed
            echo "Setting up static directories..."
            if [ -d "./static" ]; then
              echo "Merging ./static into ./app/static"
              mkdir -p ./app/static
              cp -r ./static/* ./app/static/
              rm -rf ./static
              echo "Merged static directories successfully"
            fi
            
            # Create app static directories and ensure brand folder exists
            mkdir -p app/static/images/brand app/static/css
            
            # Remove unnecessary momentro-logo.html if it exists
            rm -f momentro-logo.html
            
            # Ensure static directory has proper permissions
            chmod -R 755 app/static
            chmod 644 app/static/images/brand/momentro-logo.png
            
            # Debug: Show static files and permissions
            echo "Checking static files and permissions:"
            ls -la app/static/images/brand/
            
            # Clean up unnecessary files from root directory
            echo "Cleaning up unnecessary files from root directory..."
            rm -f *.log *.bak *.tmp
            find . -name "*.pyc" -delete
            find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
            
            # Create WSGI file
            cat > wsgi.py << 'EOF'
            #!/usr/bin/env python3
            import os
            import sys
            
            # Add the current directory to the path
            sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
            
            # Import the create_app function from run.py
            from run import create_app
            
            # Create the application instance
            application = create_app()
            
            # For Gunicorn
            app = application
            
            if __name__ == "__main__":
                app.run()
            EOF
            
            # Make sure nginx.conf uses the correct paths (verify it has the proper content)
            echo "Content of nginx.conf before building:"
            cat nginx.conf
            
            # Create start script with static file handling logic
            cat > start.sh << 'EOF'
            #!/bin/bash
            set -e
            
            echo "Setting up application directories..."
            cd /app
            
            # Create necessary directories with proper permissions
            mkdir -p app/uploads app/data app/static/images/brand
            chmod -R 755 app/uploads app/data app/static
            
            # Debug logo files presence
            echo "Checking logo files before starting services:"
            ls -la app/static/images/brand/
            
            # Ensure logo file exists and has correct permissions
            if [ -f "app/static/images/brand/momentro-logo.png" ]; then
                echo "Logo file exists, setting permissions..."
                chmod 644 app/static/images/brand/momentro-logo.png
            else
                echo "WARNING: Logo file not found!"
            fi
            
            # Make sure nginx configuration is properly installed
            echo "Verifying nginx configuration is correct..."
            cat /etc/nginx/conf.d/default.conf
            
            # Ensure nginx configuration directory exists
            mkdir -p /etc/nginx/conf.d/
            
            # Make an explicit copy of the nginx configuration with the correct paths
            cat > /etc/nginx/conf.d/default.conf << 'NGINXCONF'
            server {
                listen 80;
                server_name localhost;
                
                # Debug information location
                location = /debug {
                    add_header Content-Type text/plain;
                    add_header X-Debug-Static "Static files debug page";
                    return 200 "Debug static files";
                }
                
                # Specific locations for exact logo files
                location = /static/images/brand/momentro-logo.png {
                    alias /app/app/static/images/brand/momentro-logo.png;
                    add_header Content-Type image/png;
                    expires 30d;
                    access_log on;
                }

                location = /static/images/brand/momentro_logo.png {
                    alias /app/app/static/images/brand/momentro_logo.png;
                    add_header Content-Type image/png;
                    expires 30d;
                    access_log on;
                }
                
                # Serve static files directly
                location /static/ {
                    alias /app/app/static/;
                    expires 30d;
                    try_files $uri =404;
                    add_header Cache-Control "public, max-age=31536000";
                }
                
                location /uploads/ {
                    alias /app/app/uploads/;
                    expires 30d;
                }
                
                # Everything else to Flask app
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            NGINXCONF
            
            # Start Nginx
            echo "Starting Nginx..."
            nginx -t
            service nginx start
            
            # Start Gunicorn
            echo "Starting Gunicorn with Flask application..."
            gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level info --access-logfile - --error-logfile - wsgi:app
            
            # Keep container running
            tail -f /dev/null
            EOF
            
            chmod +x start.sh
            
            # Create Dockerfile with explicit static directory handling
            cat > Dockerfile << 'EOF'
            FROM python:3.10-slim

            # Install required packages
            RUN apt-get update && apt-get install -y nginx procps && rm -rf /var/lib/apt/lists/*

            # Set working directory
            WORKDIR /app

            # Install dependencies
            COPY requirements.txt .
            RUN pip install --upgrade pip && \
                pip install --no-cache-dir gunicorn Flask==2.0.1 Flask-Login==0.5.0 Flask-SQLAlchemy==2.5.1 && \
                pip install --no-cache-dir -r requirements.txt || pip install --no-cache-dir -r requirements.txt --no-deps

            # Create static directories first to avoid issues with file permissions
            RUN mkdir -p app/static/images/brand && \
                mkdir -p app/uploads app/data

            # Copy Nginx config
            COPY nginx.conf /etc/nginx/conf.d/default.conf
            RUN rm -f /etc/nginx/sites-enabled/default

            # Copy application code
            COPY . .
            
            # Ensure directories have proper permissions
            RUN chmod -R 755 app/uploads app/data app/static && \
                find app/static/images/brand -type f -name "*.png" -exec chmod 644 {} \;

            # Debug: show what's in the logo directory
            RUN ls -la app/static/images/brand/

            # Setup start script
            COPY start.sh /start.sh
            RUN chmod +x /start.sh

            # Expose port
            EXPOSE 80

            # Run start script
            CMD ["/start.sh"]
            EOF
            
            echo "Building Docker image..."
            # Build Docker image
            docker build -t instagram-analyzer:latest .
            
            echo "Stopping and removing existing container if it exists..."
            # Stop and remove existing container
            docker stop instagram-analyzer || true
            docker rm instagram-analyzer || true
            
            echo "Starting new container..."
            # Run container with static files mounted for persistence
            docker run -d \
              --name instagram-analyzer \
              -p 80:80 \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e APIFY_API_TOKEN="${{ secrets.APIFY_API_TOKEN }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -v $(pwd)/app/static:/app/app/static \
              -v instagram_data:/app/app/data \
              -v instagram_uploads:/app/app/uploads \
              --restart unless-stopped \
              instagram-analyzer:latest
            
            echo "Checking if container is running..."
            # Verify container is running
            docker ps | grep instagram-analyzer
            CONTAINER_ID=$(docker ps -q --filter name=instagram-analyzer)
            echo "Container ID: $CONTAINER_ID"
            
            # Give the container a moment to start up
            echo "Waiting for container to initialize..."
            sleep 10
            
            # Verify nginx config in the container
            echo "Checking nginx configuration in the container:"
            docker exec -it $CONTAINER_ID cat /etc/nginx/conf.d/default.conf
            
            # Check if the logo file exists in the container
            echo "Checking if logo file exists in the container:"
            docker exec -it $CONTAINER_ID ls -la /app/app/static/images/brand/
            
            # Test static file access
            echo "Testing static file access..."
            curl -I http://localhost/static/images/brand/momentro-logo.png
            
            echo "Deployment completed successfully." 