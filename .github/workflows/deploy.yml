name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Updated deployment to use nginx.conf from repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "Starting deployment process..."
            
            # Set up working directories
            WORK_DIR="$HOME/fresh_deployment"
            DATA_DIR="$HOME/app_persistent_data"
            
            # Create persistent data directory if it doesn't exist
            mkdir -p "$DATA_DIR/static/images/brand"
            mkdir -p "$DATA_DIR/uploads"
            mkdir -p "$DATA_DIR/data"
            
            # Force proper permissions on data directory
            sudo chown -R $(whoami):$(whoami) "$DATA_DIR"
            chmod -R 777 "$DATA_DIR"
            
            # Clean previous deployment directory
            rm -rf "$WORK_DIR"
            mkdir -p "$WORK_DIR"
            cd "$WORK_DIR"
            
            # Clone repository
            echo "Cloning fresh repository..."
            git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git .
            
            if [ ! -d app ]; then
              echo "ERROR: Repository cloning failed or app directory missing!"
              exit 1
            fi
            
            echo "Repository successfully cloned."
            git log -1 --oneline
            
            # Create the centralized database module
            echo "Creating centralized database module..."
            mkdir -p app
            cat > app/database.py << 'EOF'
"""
Database initialization module to prevent circular imports.
"""

from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

# Initialize extensions without app context
db = SQLAlchemy()
migrate = Migrate()

def init_db(app):
    """Initialize database with Flask app."""
    db.init_app(app)
    migrate.init_app(app, db)
    
    # Create all tables
    with app.app_context():
        db.create_all()
EOF
            
            # Fix auth.py to use the centralized database
            echo "Fixing auth.py circular imports..."
            if [ -f app/routes/auth.py ]; then
              # Create backup
              cp -f app/routes/auth.py app/routes/auth.py.bak
              # Fix the import
              sed -i 's/from run import db/from app.database import db/g' app/routes/auth.py
              sed -i 's/from app import db/from app.database import db/g' app/routes/auth.py
            fi
            
            # Fix model files to use centralized database
            echo "Fixing model imports in all files..."
            find app/models -type f -name "*.py" | while read file; do
              echo "Checking $file..."
              if grep -q "from app import db" "$file"; then
                sed -i 's/from app import db/from app.database import db/g' "$file"
                echo "Fixed import in $file"
              elif grep -q "from run import db" "$file"; then
                sed -i 's/from run import db/from app.database import db/g' "$file"
                echo "Fixed import in $file"
              fi
            done
            
            # Update app/__init__.py
            if [ -f app/__init__.py ]; then
              echo "Updating app/__init__.py to use centralized database module..."
              cp -f app/__init__.py app/__init__.py.bak
              
              # Check if __init__.py defines db directly
              if grep -q "db = SQLAlchemy()" app/__init__.py; then
                # Update the file to use the centralized database
                sed -i 's/from flask_sqlalchemy import SQLAlchemy/# Removed SQLAlchemy import, using centralized database/g' app/__init__.py
                sed -i 's/from flask_migrate import Migrate/# Removed Migrate import, using centralized database/g' app/__init__.py
                sed -i 's/db = SQLAlchemy()/from app.database import db, init_db/g' app/__init__.py
                sed -i 's/migrate = Migrate()/# Removed migrate initialization/g' app/__init__.py
                sed -i 's/db.init_app(app)/init_db(app)/g' app/__init__.py
                sed -i 's/migrate.init_app(app, db)/# Removed duplicate migrate initialization/g' app/__init__.py
                
                # Fix datetime.now issue if present
                sed -i "s/return {'now': datetime.now}/return {'now': datetime.utcnow}/g" app/__init__.py
              fi
            fi
            
            # Update wsgi.py
            echo "Updating wsgi.py..."
            cat > wsgi.py << 'EOF'
"""
WSGI entry point for the application.
"""
import os
from dotenv import load_dotenv

# Load environment variables from .env file if it exists
load_dotenv()

# Import the app factory function
from app import create_app

# Create the application instance
app = create_app()

# This is what will be imported by Gunicorn
application = app

if __name__ == "__main__":
    # Run the app if this script is executed directly (not recommended for production)
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8001)))
EOF
            
            # Update run.py
            echo "Updating run.py..."
            cat > run.py << 'EOF'
"""
Development server entry point.
This file is used for local development only.
For production, use wsgi.py with Gunicorn.
"""
from app import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8001, debug=True)
EOF
            
            # Fix wordcloud dependency in requirements.txt
            echo "Fixing wordcloud dependency in requirements.txt..."
            if [ -f requirements.txt ]; then
              # Comment out any wordcloud references to handle separately
              sed -i 's/wordcloud==1.8.1/# wordcloud==1.8.1 - Will be installed separately/g' requirements.txt
              sed -i 's/wordcloud-binary==1.8.1/# wordcloud-binary==1.8.1 - Will be installed separately/g' requirements.txt
            else
              echo "Creating requirements.txt..."
              echo "Flask==2.0.1" > requirements.txt
              echo "Flask-Login==0.5.0" >> requirements.txt
              echo "Flask-SQLAlchemy==2.5.1" >> requirements.txt
              echo "gunicorn==21.2.0" >> requirements.txt
              echo "ipython==8.18.1" >> requirements.txt
              echo "SQLAlchemy==2.0.4" >> requirements.txt
              echo "Werkzeug==2.0.3" >> requirements.txt
              echo "# wordcloud==1.8.1 - Will be installed separately" >> requirements.txt
            fi
            
            # Copy static files if they exist
            if [ -d app/static ]; then
              echo "Copying static files to persistent data directory..."
              cp -r app/static/* "$DATA_DIR/static/"
            fi
            
            # Ensure logo files exist in data directory
            echo "Checking for logo files..."
            if [ ! -f "$DATA_DIR/static/images/brand/momentro-logo.png" ]; then
              echo "Logo files missing, looking for them in repository..."
              
              # Look for logo files in the repository
              LOGO_FILE=$(find . -name "momentro-logo.png" | head -1)
              if [ -n "$LOGO_FILE" ]; then
                echo "Found logo file at $LOGO_FILE"
                cp "$LOGO_FILE" "$DATA_DIR/static/images/brand/momentro-logo.png"
                cp "$LOGO_FILE" "$DATA_DIR/static/images/brand/momentro_logo.png"
              else
                echo "No logo file found, downloading placeholder image..."
                curl -s https://via.placeholder.com/150 -o "$DATA_DIR/static/images/brand/momentro-logo.png"
                curl -s https://via.placeholder.com/150 -o "$DATA_DIR/static/images/brand/momentro_logo.png"
              fi
            fi
            
            # Ensure proper permissions
            chmod -R 777 "$DATA_DIR"
            
            # Create improved Dockerfile
            echo "Creating Dockerfile..."
            cat > Dockerfile << 'EOF'
FROM python:3.10-slim

# Install Nginx and required packages including build essential tools for wordcloud
RUN apt-get update && apt-get install -y nginx curl unzip gcc build-essential python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy Nginx config
COPY docker-nginx.conf /etc/nginx/conf.d/default.conf
RUN rm -f /etc/nginx/sites-enabled/default

# Set working directory
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p /app/app/static /app/app/uploads /app/app/data
RUN mkdir -p /app/app/static/css /app/app/static/js /app/app/static/images/profiles /app/app/static/images/posts /app/app/static/images/brand
RUN mkdir -p /app/app/static/font-awesome/4.3.0/css /app/app/static/font-awesome/4.3.0/fonts

# Create a basic style.css file
RUN echo "/* Basic styles */\nbody {\n  font-family: 'Arial', sans-serif;\n  line-height: 1.6;\n  margin: 0;\n  padding: 0;\n  color: #333;\n}\n.container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 15px;\n}" > /app/app/static/css/style.css

# Create empty logo files (will be populated by start.sh)
RUN touch /app/app/static/images/brand/momentro-logo.png \
    && touch /app/app/static/images/brand/momentro_logo.png \
    && touch /app/app/static/favicon.ico

# Ensure directories have proper permissions
RUN chmod -R 777 /app/app/static /app/app/uploads /app/app/data

# Copy requirements first
COPY requirements.txt /app/

# Modify requirements to remove wordcloud if needed
RUN sed -i 's/wordcloud-binary==1.8.1/# wordcloud-binary==1.8.1 - Will be installed separately/g' requirements.txt && \
    sed -i 's/wordcloud==1.8.1/# wordcloud==1.8.1 - Will be installed separately/g' requirements.txt

# Install dependencies with proper setup
RUN pip install --upgrade pip && \
    pip install --no-cache-dir gunicorn Flask==2.0.1 Flask-Login==0.5.0 Flask-SQLAlchemy==2.5.1 Werkzeug==2.0.3 && \
    # Install main requirements first
    pip install --no-cache-dir --prefer-binary -r requirements.txt && \
    # Now directly install wordcloud with build tools already installed
    pip install --no-cache-dir wordcloud==1.8.1

# Copy application code
COPY . .

# Expose port
EXPOSE 80

# Run start script
CMD ["sh", "-c", "nginx && gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level debug wsgi:application"]
EOF
            
            # Create start.sh script
            echo "Creating start.sh script..."
            cat > start.sh << 'EOF'
#!/bin/bash
set -e

# IMPORTANT: Fix any circular imports at runtime
echo "Checking for circular imports in auth.py..."
if grep -q "from run import db" /app/app/routes/auth.py; then
    echo "CRITICAL: Found circular import in auth.py, fixing now..."
    sed -i 's/from run import db/from app.database import db/g' /app/app/routes/auth.py
    echo "Fixed circular import in auth.py"
fi

# Set up necessary directories
echo "Setting up application directories..."
mkdir -p /app/app/static /app/app/uploads /app/app/data
mkdir -p /app/app/static/css /app/app/static/js 
mkdir -p /app/app/static/images/profiles /app/app/static/images/posts /app/app/static/images/brand
chmod -R 777 /app/app/static /app/app/uploads /app/app/data

# Create missing CSS file if it doesn't exist
if [ ! -f /app/app/static/css/style.css ]; then
    echo "Creating missing CSS file..."
    cat > /app/app/static/css/style.css << 'EOCSS'
/* Basic styles */
body {
  font-family: 'Arial', sans-serif;
  line-height: 1.6;
  margin: 0;
  padding: 0;
  color: #333;
}
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 15px;
}
EOCSS
fi

# Copy the logo files from persistent storage
echo "Copying logo files from persistent storage..."
cp -f "$DATA_DIR/static/images/brand/momentro-logo.png" /app/app/static/images/brand/momentro-logo.png
cp -f "$DATA_DIR/static/images/brand/momentro_logo.png" /app/app/static/images/brand/momentro_logo.png
chmod 644 /app/app/static/images/brand/momentro-logo.png
chmod 644 /app/app/static/images/brand/momentro_logo.png

# Create favicon
echo "Creating favicon..."
cp -f /app/app/static/images/brand/momentro-logo.png /app/app/static/favicon.ico
chmod 644 /app/app/static/favicon.ico

# Clean Python cache to ensure clean imports
echo "Cleaning Python cache files..."
find /app -name "*.pyc" -delete
find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

echo "Starting Nginx..."
nginx -t && nginx

echo "Starting Gunicorn..."
cd /app
exec gunicorn --bind 127.0.0.1:8000 \
    --timeout 120 \
    --workers 3 \
    --log-level debug \
    --access-logfile - \
    --error-logfile - \
    "wsgi:application"
EOF
            chmod +x start.sh
            
            # Create docker-compose.yml
            echo "Creating docker-compose.yml..."
            cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - "$DATA_DIR/static:/app/app/static"
      - "$DATA_DIR/uploads:/app/app/uploads"
      - "$DATA_DIR/data:/app/app/data"
      - ./logs:/app/logs
    environment:
      - FLASK_APP=app
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - SECRET_KEY=${SECRET_KEY:-super-secret-key-please-change-in-prod}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///app.db}
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    command: /app/start.sh
EOF
            
            # Create docker-nginx.conf
            echo "Creating Nginx configuration..."
            cat > docker-nginx.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    
    # Debug information location
    location = /debug {
        add_header Content-Type text/plain;
        add_header X-Debug-Static "Static files debug page";
        return 200 "Debug static files";
    }
    
    # Specific locations for exact logo files
    location = /static/images/brand/momentro-logo.png {
        alias /app/app/static/images/brand/momentro-logo.png;
        add_header Content-Type image/png;
        expires 30d;
        access_log off;
    }
    
    location = /static/images/brand/momentro_logo.png {
        alias /app/app/static/images/brand/momentro_logo.png;
        add_header Content-Type image/png;
        expires 30d;
        access_log off;
    }
    
    # Serve static files directly
    location /static/ {
        alias /app/app/static/;
        expires 30d;
        add_header Cache-Control "public, max-age=31536000";
        try_files $uri =404;
    }
    
    location /uploads/ {
        alias /app/app/uploads/;
        expires 30d;
    }
    
    # Proxy to Flask app
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF
            
            # Fix permissions
            chmod +x start.sh
            
            # Build and start containers
            echo "Building and starting Docker containers..."
            docker-compose build --no-cache
            docker-compose up -d
            
            # Wait for containers to start
            echo "Waiting for containers to start..."
            sleep 10
            
            # Check if containers are running
            if docker-compose ps | grep -q "Up"; then
              echo "Deployment successful! Application is running."
            else
              echo "ERROR: Containers failed to start. Check logs for details."
              docker-compose logs
              exit 1
            fi 