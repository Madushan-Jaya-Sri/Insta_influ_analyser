name: Deploy to EC2

on:
  push:
    branches:
      - main
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.AWS_SSH_KEY }}
        
    - name: Setup known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create env file
      run: |
        echo "Creating .env file..."
        cat > .env << EOF
        FLASK_ENV=production
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
        EOF
        
    - name: Archive repository
      run: |
        # Use a specific directory to avoid "file changed as we read it" error
        mkdir -p /tmp/app_archive
        cp -R . /tmp/app_archive
        cd /tmp/app_archive
        tar -czf /tmp/app.tar.gz --exclude='.git' --exclude='.github' .
        cp /tmp/app.tar.gz $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        
    - name: Create project directory on EC2
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "mkdir -p ~/Insta_influ_analyser"
        
    - name: Upload .env and repository
      run: |
        scp .env ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/Insta_influ_analyser/
        scp /tmp/app.tar.gz ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/
        
    - name: Extract and backup on EC2
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "cd ~/ && \
        if [ -d 'Insta_influ_analyser.bak' ]; then rm -rf Insta_influ_analyser.bak; fi && \
        if [ -d 'Insta_influ_analyser-code' ]; then mv Insta_influ_analyser-code Insta_influ_analyser.bak; fi && \
        mkdir -p Insta_influ_analyser-code && \
        tar -xzf app.tar.gz -C Insta_influ_analyser-code && \
        rm app.tar.gz"
        
    - name: Run setup script
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "if ! command -v docker &> /dev/null; then cd ~/Insta_influ_analyser-code && bash scripts/setup_ec2.sh; fi"
        
    - name: Deploy application
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "cd ~/Insta_influ_analyser-code && \
        mkdir -p ~/Insta_influ_analyser/docker_volumes/app_data && \
        mkdir -p ~/Insta_influ_analyser/docker_volumes/app_uploads && \
        mkdir -p ~/Insta_influ_analyser/docker_volumes/app_static && \
        mkdir -p ~/Insta_influ_analyser/docker_volumes/app_sessions && \
        mkdir -p ~/Insta_influ_analyser/nginx && \
        cp -r nginx/* ~/Insta_influ_analyser/nginx/ && \
        cp docker-compose.yml ~/Insta_influ_analyser/ && \
        cp Dockerfile ~/Insta_influ_analyser/ && \
        cp .env ~/Insta_influ_analyser/ && \
        cp -r * ~/Insta_influ_analyser/ && \
        cd ~/Insta_influ_analyser && \
        docker-compose down && \
        docker-compose build --no-cache && \
        docker-compose up -d"
        
    - name: Clean up
      run: |
        rm -f ~/.ssh/id_rsa
        rm -f .env