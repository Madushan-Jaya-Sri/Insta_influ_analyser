name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Create app directory if it doesn't exist
            mkdir -p ~/Insta_influ_analyser

            # Clone or update the repository, handling any local changes
            if [ -d ~/Insta_influ_analyser/.git ]; then
              # If repo exists, handle potential merge conflicts
              cd ~/Insta_influ_analyser
              # Stash any local changes that might conflict
              git stash -u || true
              # Force pull the latest changes from main branch
              git fetch origin
              git reset --hard origin/main
              echo "Repository updated to latest main branch"
            else
              # Clone the repository if it doesn't exist
              git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git ~/Insta_influ_analyser
              cd ~/Insta_influ_analyser
              echo "Repository cloned successfully"
            fi
            
            # Fix ipython version in requirements.txt before building
            sed -i 's/ipython==9.1.0/ipython==8.18.1/g' requirements.txt
            
            # Create a WSGI file that properly uses the create_app function from run.py
            cat > wsgi.py << 'EOF'
            #!/usr/bin/env python3
            import os
            import sys

            # Add the current directory to the path
            sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

            # Import the create_app function from run.py
            from run import create_app

            # Create the application instance
            application = create_app()
            
            # For Gunicorn
            app = application

            if __name__ == "__main__":
                app.run()
            EOF
            
            # Create persistent directories for static files outside of Docker
            mkdir -p ~/persistent_data/static_files/images/brand
            
            # Create a simple placeholder logo if the actual logo doesn't exist
            if [ ! -f ~/persistent_data/static_files/images/brand/momentro-logo.png ]; then
              echo "Creating placeholder momentro-logo.png"
              cat > ~/placeholder.html << EOF
              <html>
              <body style="margin:0; background:#fff; width:300px; height:100px; display:flex; align-items:center; justify-content:center; font-family:Arial;">
                <h1 style="color:#833ab4; font-size:24px;">MOMENTRO</h1>
              </body>
              </html>
              EOF
              
              # Try using wkhtmltoimage if available
              if which wkhtmltoimage > /dev/null; then
                wkhtmltoimage ~/placeholder.html ~/persistent_data/static_files/images/brand/momentro-logo.png
              else
                # If not available, create a simple text file
                echo "MOMENTRO" > ~/persistent_data/static_files/images/brand/momentro-logo.png
              fi
            fi
            
            # Create both naming variations of the logo
            if [ -f ~/persistent_data/static_files/images/brand/momentro-logo.png ]; then
              cp ~/persistent_data/static_files/images/brand/momentro-logo.png ~/persistent_data/static_files/images/brand/momentro_logo.png || true
            fi
            
            # Ensure the brand directory exists in our app
            mkdir -p app/static/images/brand
            
            # Copy the logo files from persistent storage to our app
            cp -f ~/persistent_data/static_files/images/brand/momentro-logo.png app/static/images/brand/ || true
            cp -f ~/persistent_data/static_files/images/brand/momentro_logo.png app/static/images/brand/ || true
            
            # Create a better nginx configuration to serve the app
            cat > nginx.conf << 'EOF'
            server {
                listen 80;
                server_name localhost;
                
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                location /static/ {
                    alias /app/app/static/;
                    expires 30d;
                }
                
                location /uploads/ {
                    alias /app/app/uploads/;
                    expires 30d;
                }
            }
            EOF
            
            # Create a simpler start script that uses the newly created wsgi.py
            cat > start.sh << 'EOF'
            #!/bin/bash
            set -e
            
            echo "Starting Nginx..."
            nginx -t
            service nginx start
            
            echo "Starting Gunicorn with Flask application..."
            cd /app
            
            # Create necessary directories with proper permissions
            mkdir -p app/uploads app/data app/static/images app/static/images/brand
            chmod -R 777 app/uploads app/data app/static/images
            
            # Ensure logo files exist in both naming variations inside container
            if [ -f "app/static/images/brand/momentro-logo.png" ]; then
              cp -f app/static/images/brand/momentro-logo.png app/static/images/brand/momentro_logo.png || true
            fi
            
            # Additional fallback - create placeholder logo files if they don't exist
            if [ ! -f "app/static/images/brand/momentro-logo.png" ]; then
              echo "MOMENTRO" > app/static/images/brand/momentro-logo.png
              echo "MOMENTRO" > app/static/images/brand/momentro_logo.png
            fi
            
            # Use the wsgi module with the create_app function from run.py
            echo "Using wsgi.py with create_app function from run.py"
            gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level debug --access-logfile - --error-logfile - wsgi:app
            
            # Keep the container running for debugging
            tail -f /dev/null
            EOF
            
            chmod +x start.sh

            # Create a simplified Dockerfile for improved compatibility
            cat > Dockerfile.simple << 'EOF'
            FROM python:3.10-slim

            # Install Nginx and required packages
            RUN apt-get update && apt-get install -y nginx procps grep findutils && rm -rf /var/lib/apt/lists/*

            # Copy Nginx config
            COPY nginx.conf /etc/nginx/conf.d/default.conf
            # Remove default nginx site
            RUN rm -f /etc/nginx/sites-enabled/default

            # Set working directory
            WORKDIR /app

            # Update pip and install dependencies
            COPY requirements.txt .
            RUN pip install --upgrade pip && \
                pip install --no-cache-dir gunicorn Flask==2.0.1 Flask-Login==0.5.0 Flask-SQLAlchemy==2.5.1 && \
                pip install --no-cache-dir -r requirements.txt || pip install --no-cache-dir -r requirements.txt --no-deps

            # Create static directories and ensure they exist
            RUN mkdir -p app/static/images/brand

            # Copy application code
            COPY . .

            # Create wsgi.py and wsgi module with correct imports
            RUN if [ ! -f "wsgi.py" ]; then \
                echo "Creating wsgi.py"; \
                echo '#!/usr/bin/env python3' > wsgi.py; \
                echo 'import os' >> wsgi.py; \
                echo 'import sys' >> wsgi.py; \
                echo 'sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))' >> wsgi.py; \
                echo 'from run import create_app' >> wsgi.py; \
                echo 'application = create_app()' >> wsgi.py; \
                echo 'app = application' >> wsgi.py; \
                echo 'if __name__ == "__main__":' >> wsgi.py; \
                echo '    app.run()' >> wsgi.py; \
            fi

            # Make sure the uploads and data directories exist
            RUN mkdir -p app/uploads app/data app/static/images app/static/images/brand && \
                chmod -R 777 app/uploads app/data app/static/images
                
            # Ensure both versions of the logo exist
            RUN if [ -f "app/static/images/brand/momentro-logo.png" ]; then \
                cp -f app/static/images/brand/momentro-logo.png app/static/images/brand/momentro_logo.png || true; \
            fi

            # Fallback - create placeholder logo files if they don't exist
            RUN echo "Creating fallback logo files" && \
                if [ ! -f "app/static/images/brand/momentro-logo.png" ]; then \
                  echo "MOMENTRO" > app/static/images/brand/momentro-logo.png; \
                  echo "MOMENTRO" > app/static/images/brand/momentro_logo.png; \
                fi

            # Make start script executable
            COPY start.sh /start.sh
            RUN chmod +x /start.sh

            # Expose port
            EXPOSE 80

            # Run start script
            CMD ["/start.sh"]
            EOF
            
            # Build the Docker image using the simplified Dockerfile
            docker build -t instagram-analyzer:latest -f Dockerfile.simple .
            
            # Stop and remove the existing container if it's running
            docker stop instagram-analyzer || true
            docker rm instagram-analyzer || true
            
            # Run the new container with environment variables and mounting persistent volumes
            docker run -d \
              --name instagram-analyzer \
              -p 80:80 \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e APIFY_API_TOKEN="${{ secrets.APIFY_API_TOKEN }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -v ~/persistent_data/static_files/images/brand:/app/app/static/images/brand \
              -v instagram_data:/app/app/data \
              -v instagram_uploads:/app/app/uploads \
              --restart unless-stopped \
              instagram-analyzer:latest
            
            # Check if container is running
            docker ps | grep instagram-analyzer
            
            # Show container logs to help with debugging
            sleep 5
            docker logs instagram-analyzer
            
            # Remove unused images to save space
            docker image prune -af --filter "until=24h" 