name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Updated deployment to use nginx.conf from repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "Starting deployment process..."
            
            # Set up working directories
            WORK_DIR="$HOME/fresh_deployment"
            DATA_DIR="$HOME/app_persistent_data"
            
            # Clean previous deployment directory with sudo
            echo "Cleaning previous deployment..."
            sudo rm -rf "$WORK_DIR"
            mkdir -p "$WORK_DIR"
            cd "$WORK_DIR"
            
            # Clone repository
            echo "Cloning fresh repository..."
            git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git .
            
            if [ ! -d app ]; then
              echo "ERROR: Repository cloning failed or app directory missing!"
              exit 1
            fi
            
            echo "Repository successfully cloned."
            git log -1 --oneline
            
            # Create the centralized database module
            echo "Creating centralized database module..."
            mkdir -p app
            echo '"""Database initialization module to prevent circular imports."""' > app/database.py
            echo '' >> app/database.py
            echo 'from flask_sqlalchemy import SQLAlchemy' >> app/database.py
            echo 'from flask_migrate import Migrate' >> app/database.py
            echo '' >> app/database.py
            echo '# Initialize extensions without app context' >> app/database.py
            echo 'db = SQLAlchemy()' >> app/database.py
            echo 'migrate = Migrate()' >> app/database.py
            echo '' >> app/database.py
            echo 'def init_db(app):' >> app/database.py
            echo '    """Initialize database with Flask app."""' >> app/database.py
            echo '    db.init_app(app)' >> app/database.py
            echo '    migrate.init_app(app, db)' >> app/database.py
            echo '    ' >> app/database.py
            echo '    # Create all tables' >> app/database.py
            echo '    with app.app_context():' >> app/database.py
            echo '        db.create_all()' >> app/database.py
            
            # Fix auth.py file if it exists
            if [ -f app/routes/auth.py ]; then
              echo "Fixing circular imports in auth.py..."
              cp app/routes/auth.py app/routes/auth.py.bak
              sed -i 's/from run import db/from app.database import db/g' app/routes/auth.py
            fi
            
            # Run emergency fix script
            if [ -f emergency_fix.py ]; then
              echo "Running emergency fixes..."
              python emergency_fix.py
            fi
            
            # Create persistent data directory if it doesn't exist
            echo "Setting up persistent data directories..."
            sudo mkdir -p "$DATA_DIR/static/images/brand"
            sudo mkdir -p "$DATA_DIR/uploads"
            sudo mkdir -p "$DATA_DIR/data"
            
            # Force proper permissions on data directory
            sudo chown -R $(whoami):$(whoami) "$DATA_DIR"
            sudo chmod -R 777 "$DATA_DIR"
            
            # Create symbolic links for persistent data
            echo "Creating symbolic links for persistent data..."
            sudo rm -rf app/static/images/brand
            sudo rm -rf app/uploads
            sudo rm -rf app/data
            ln -sf "$DATA_DIR/static/images/brand" app/static/images/brand
            ln -sf "$DATA_DIR/uploads" app/uploads
            ln -sf "$DATA_DIR/data" app/data
            
            # Ensure proper permissions
            sudo chown -R $(whoami):$(whoami) .
            sudo chmod -R 755 app
            sudo chmod -R 777 app/static/images
            sudo chmod -R 777 app/uploads
            sudo chmod -R 777 app/data
            sudo chmod -R 777 logs
            
            # Build and run with Docker Compose
            echo "Building and running Docker containers..."
            # Make sure docker-compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing docker-compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Stop any running containers
            docker-compose down || true
            
            # Build and start containers
            docker-compose build --no-cache
            docker-compose up -d
            
            # Check if containers are running
            if docker-compose ps | grep -q "Up"; then
              echo "Deployment successful! Application is running."
            else
              echo "ERROR: Containers failed to start. Check logs with 'docker-compose logs'"
              docker-compose logs
              exit 1
            fi
