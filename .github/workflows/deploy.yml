name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "Starting deployment process..."
            
            # Remove existing directory entirely for a clean start
            rm -rf ~/Insta_influ_analyser
            echo "Removed existing repository directory"
            
            # Fresh clone of the repository
            git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git ~/Insta_influ_analyser
            cd ~/Insta_influ_analyser
            echo "Repository freshly cloned"
            
            # Fix ipython version in requirements.txt
            sed -i 's/ipython==9.1.0/ipython==8.18.1/g' requirements.txt
            
            # Fix static directory structure - merge static directories
            echo "Merging static directories to resolve conflicts..."
            if [ -d "./static" ]; then
              echo "Merging ./static into ./app/static"
              mkdir -p ./app/static
              cp -r ./static/* ./app/static/
              rm -rf ./static
              echo "Merged static directories successfully"
            fi
            
            # Create app static directories and ensure all required folders exist
            mkdir -p app/static/images/brand
            mkdir -p app/static/css
            mkdir -p app/static/js
            mkdir -p app/static/font-awesome/4.3.0/css
            mkdir -p app/static/font-awesome/4.3.0/fonts
            
            # Download Font Awesome 4.3.0 if it doesn't exist
            if [ ! -f "app/static/font-awesome/4.3.0/css/font-awesome.min.css" ]; then
              echo "Downloading Font Awesome 4.3.0..."
              wget -q https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.min.css -O app/static/font-awesome/4.3.0/css/font-awesome.min.css
              wget -q https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/fonts/fontawesome-webfont.woff2 -O app/static/font-awesome/4.3.0/fonts/fontawesome-webfont.woff2
              wget -q https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/fonts/fontawesome-webfont.woff -O app/static/font-awesome/4.3.0/fonts/fontawesome-webfont.woff
              wget -q https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/fonts/fontawesome-webfont.ttf -O app/static/font-awesome/4.3.0/fonts/fontawesome-webfont.ttf
              echo "Font Awesome downloaded"
            fi
            
            # Fix CSS file paths in HTML templates if necessary
            echo "Checking and fixing paths in HTML templates..."
            find app/templates -type f -name "*.html" -exec sed -i 's|/font-awesome/4.3.0/|/static/font-awesome/4.3.0/|g' {} \;
            
            # Create a simple logo HTML file
            cat > momentro-logo.html << 'EOF'
            <html>
              <head>
                <style>
                  body { 
                    margin: 0; 
                    background: #fff; 
                    width: 300px; 
                    height: 100px; 
                    display: flex; 
                    align-items: center; 
                    justify-content: center; 
                    font-family: Arial, sans-serif;
                  }
                  h1 {
                    color: #833ab4;
                    font-size: 24px;
                  }
                </style>
              </head>
              <body>
                <h1>MOMENTRO</h1>
              </body>
            </html>
            EOF
            
            # Try to install wkhtmltoimage if not available
            if ! which wkhtmltoimage > /dev/null; then
              echo "Installing wkhtmltopdf for image generation..."
              apt-get update && apt-get install -y wkhtmltopdf || true
            fi
            
            # Try to create PNG from HTML file
            if which wkhtmltoimage > /dev/null; then
              echo "Generating logo using wkhtmltoimage..."
              wkhtmltoimage momentro-logo.html app/static/images/brand/momentro-logo.png || echo "Failed to create image"
            fi
            
            # Fallback to a text file if PNG creation failed
            if [ ! -s app/static/images/brand/momentro-logo.png ]; then
              echo "Creating placeholder text logo file..."
              echo "MOMENTRO" > app/static/images/brand/momentro-logo.png
            fi
            
            # Create both variants of the file
            cp app/static/images/brand/momentro-logo.png app/static/images/brand/momentro_logo.png || true
            
            # Create WSGI file
            cat > wsgi.py << 'EOF'
            #!/usr/bin/env python3
            import os
            import sys
            
            # Add the current directory to the path
            sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
            
            # Import the create_app function from run.py
            from run import create_app
            
            # Create the application instance
            application = create_app()
            
            # For Gunicorn
            app = application
            
            if __name__ == "__main__":
                app.run()
            EOF
            
            # Create enhanced nginx configuration for all static files
            cat > nginx.conf << 'EOF'
            server {
                listen 80;
                server_name localhost;
                
                # Handle direct Font Awesome requests
                location ~ ^/font-awesome/(.*)$ {
                    alias /app/app/static/font-awesome/$1;
                    try_files $uri =404;
                    expires 30d;
                    add_header Cache-Control "public";
                }
                
                # Specific match for brand logo files
                location ~ ^/static/images/brand/.*\.(png|jpg|jpeg|gif)$ {
                    alias /app/app/static/images/brand/;
                    try_files $uri =404;
                    expires 30d;
                    add_header Cache-Control "public";
                }
                
                # Serve static files directly
                location /static/ {
                    alias /app/app/static/;
                    expires 30d;
                    try_files $uri =404;
                }
                
                location /uploads/ {
                    alias /app/app/uploads/;
                    expires 30d;
                }
                
                # Everything else to Flask app
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF
            
            # Create start script with enhanced static file handling
            cat > start.sh << 'EOF'
            #!/bin/bash
            set -e
            
            echo "Setting up application directories..."
            cd /app
            
            # Create necessary directories with proper permissions
            mkdir -p app/uploads app/data app/static/images app/static/images/brand
            mkdir -p app/static/css app/static/js app/static/font-awesome/4.3.0/css app/static/font-awesome/4.3.0/fonts
            chmod -R 777 app/uploads app/data app/static
            
            # Debug static files (check directory structure)
            echo "Static files directory structure:"
            find app/static -type d | sort
            
            # Debug Font Awesome files
            echo "Checking Font Awesome files:"
            ls -la app/static/font-awesome/4.3.0/css || echo "Font Awesome CSS directory not found!"
            
            # Ensure logo files exist with proper permissions
            if [ ! -s "app/static/images/brand/momentro-logo.png" ]; then
              echo "Creating momentro-logo.png in container..."
              echo "MOMENTRO" > app/static/images/brand/momentro-logo.png
              chmod 644 app/static/images/brand/momentro-logo.png
            fi
            
            if [ ! -s "app/static/images/brand/momentro_logo.png" ]; then
              echo "Creating momentro_logo.png in container..."
              echo "MOMENTRO" > app/static/images/brand/momentro_logo.png
              chmod 644 app/static/images/brand/momentro_logo.png
            fi
            
            # Check if we need to create symbolic links for font-awesome
            if [ ! -L "/app/font-awesome" ] && [ -d "/app/app/static/font-awesome" ]; then
              echo "Creating symbolic link for font-awesome direct access"
              ln -s /app/app/static/font-awesome /app/font-awesome
            fi
            
            echo "Starting Nginx..."
            nginx -t
            service nginx start
            
            # Start Gunicorn
            echo "Starting Gunicorn with Flask application..."
            gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level debug --access-logfile - --error-logfile - wsgi:app
            
            # Keep container running
            tail -f /dev/null
            EOF
            
            chmod +x start.sh
            
            # Create Dockerfile with enhanced static file handling
            cat > Dockerfile.simple << 'EOF'
            FROM python:3.10-slim

            # Install required packages
            RUN apt-get update && apt-get install -y nginx procps grep findutils wget && rm -rf /var/lib/apt/lists/*

            # Copy Nginx config
            COPY nginx.conf /etc/nginx/conf.d/default.conf
            RUN rm -f /etc/nginx/sites-enabled/default

            # Set working directory
            WORKDIR /app

            # Install dependencies
            COPY requirements.txt .
            RUN pip install --upgrade pip && \
                pip install --no-cache-dir gunicorn Flask==2.0.1 Flask-Login==0.5.0 Flask-SQLAlchemy==2.5.1 && \
                pip install --no-cache-dir -r requirements.txt || pip install --no-cache-dir -r requirements.txt --no-deps

            # Create all necessary directories first
            RUN mkdir -p app/static/images/brand app/static/css app/static/js app/static/font-awesome/4.3.0/css app/static/font-awesome/4.3.0/fonts && \
                mkdir -p app/uploads app/data

            # Copy application code 
            COPY . .
            
            # Ensure Font Awesome files are available
            RUN if [ ! -f "app/static/font-awesome/4.3.0/css/font-awesome.min.css" ]; then \
                echo "Downloading Font Awesome in Dockerfile" && \
                wget -q https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/css/font-awesome.min.css -O app/static/font-awesome/4.3.0/css/font-awesome.min.css && \
                wget -q https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/fonts/fontawesome-webfont.woff2 -O app/static/font-awesome/4.3.0/fonts/fontawesome-webfont.woff2 && \
                wget -q https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/fonts/fontawesome-webfont.woff -O app/static/font-awesome/4.3.0/fonts/fontawesome-webfont.woff && \
                wget -q https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.3.0/fonts/fontawesome-webfont.ttf -O app/static/font-awesome/4.3.0/fonts/fontawesome-webfont.ttf; \
            fi
            
            # Debug static directories
            RUN echo "Static directories in Docker image:" && \
                find . -name static | sort && \
                echo "Font Awesome files:" && \
                find app/static/font-awesome -type f | sort || true

            # Ensure directories have proper permissions
            RUN chmod -R 777 app/uploads app/data app/static
            
            # Create symbolic link for font-awesome direct access
            RUN ln -s /app/app/static/font-awesome /app/font-awesome || true

            # Setup start script
            COPY start.sh /start.sh
            RUN chmod +x /start.sh

            # Expose port
            EXPOSE 80

            # Run start script
            CMD ["/start.sh"]
            EOF
            
            echo "Building Docker image..."
            # Build Docker image
            docker build -t instagram-analyzer:latest -f Dockerfile.simple .
            
            echo "Stopping and removing existing container if it exists..."
            # Stop and remove existing container
            docker stop instagram-analyzer || true
            docker rm instagram-analyzer || true
            
            echo "Starting new container..."
            # Run container with proper static file mounting
            docker run -d \
              --name instagram-analyzer \
              -p 80:80 \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e APIFY_API_TOKEN="${{ secrets.APIFY_API_TOKEN }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -v $(pwd)/app/static:/app/app/static \
              -v instagram_data:/app/app/data \
              -v instagram_uploads:/app/app/uploads \
              --restart unless-stopped \
              instagram-analyzer:latest
            
            echo "Checking if container is running..."
            # Verify container is running
            docker ps | grep instagram-analyzer
            
            echo "Testing access to static files..."
            # Test access to static files
            sleep 3
            echo "Checking logo file:"
            curl -I http://localhost/static/images/brand/momentro-logo.png
            
            echo "Checking Font Awesome file:"
            curl -I http://localhost/font-awesome/4.3.0/css/font-awesome.min.css
            
            echo "Container logs:"
            # Show logs
            docker logs instagram-analyzer
            
            echo "Cleaning up unused images..."
            # Clean up unused images
            docker image prune -af --filter "until=24h"
            
            echo "Deployment completed successfully." 