name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          timeout: 40m
          script: |
            echo "Starting deployment process..."
            
            # Set up working directories
            WORK_DIR="$HOME/fresh_deployment"
            DATA_DIR="$HOME/app_persistent_data"
            
            # Create persistent data directory if it doesn't exist
            mkdir -p "$DATA_DIR/static/images/brand"
            mkdir -p "$DATA_DIR/uploads"
            mkdir -p "$DATA_DIR/data"
            mkdir -p "$DATA_DIR/logs"
            mkdir -p "$DATA_DIR/docker-cache"
            
            # Force proper permissions on data directory
            sudo chown -R $(whoami):$(whoami) "$DATA_DIR"
            chmod -R 777 "$DATA_DIR"
            
            # Clean previous deployment directory
            rm -rf "$WORK_DIR"
            mkdir -p "$WORK_DIR"
            cd "$WORK_DIR"
            
            # Clone repository
            echo "Cloning fresh repository..."
            git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git .
            
            if [ ! -d app ]; then
              echo "ERROR: Repository cloning failed or app directory missing!"
              exit 1
            fi
            
            echo "Repository successfully cloned."
            git log -1 --oneline
            
            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              echo "Creating .env file..."
              cat > .env << EOF
            FLASK_APP=app
            FLASK_ENV=production
            FLASK_DEBUG=0
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DATABASE_URL=sqlite:///app.db
            LOG_LEVEL=INFO
            PYTHONUNBUFFERED=1
            APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            EOF
            fi
            
            # Create symbolic links for persistent data
            echo "Setting up persistent data links..."
            ln -sf "$DATA_DIR/static" "$WORK_DIR/app/static"
            ln -sf "$DATA_DIR/uploads" "$WORK_DIR/app/uploads"
            ln -sf "$DATA_DIR/data" "$WORK_DIR/app/data"
            ln -sf "$DATA_DIR/logs" "$WORK_DIR/logs"
            
            # Clean up existing containers
            echo "Cleaning up existing containers..."
            docker rm -f instagram-app instagram-nginx fresh_deployment-app-1 || true
            
            # Optimize Docker build - pre-pull the base image
            echo "Pre-pulling base Python image to speed up build..."
            docker pull python:3.10-slim
            
            # Update docker-compose.yml to ensure only two containers
            cat > docker-compose.yml << EOF
            version: '3.8'
            
            services:
              app:
                container_name: instagram-app
                build:
                  context: .
                  dockerfile: Dockerfile
                restart: unless-stopped
                environment:
                  - FLASK_APP=app
                  - FLASK_ENV=production
                  - FLASK_DEBUG=0
                  - SECRET_KEY=\${SECRET_KEY}
                  - DATABASE_URL=\${DATABASE_URL:-sqlite:///app.db}
                  - LOG_LEVEL=INFO
                  - PYTHONUNBUFFERED=1
                  - APIFY_API_TOKEN=\${APIFY_API_TOKEN}
                  - OPENAI_API_KEY=\${OPENAI_API_KEY}
                volumes:
                  - ./app/static:/app/app/static
                  - ./app/uploads:/app/app/uploads
                  - ./app/data:/app/app/data
                  - ./logs:/app/logs
                  - $DATA_DIR/docker-cache:/root/.cache/pip
                networks:
                  - instagram_network
            
              nginx:
                container_name: instagram-nginx
                image: nginx:alpine
                restart: unless-stopped
                ports:
                  - "80:80"
                volumes:
                  - ./nginx.conf:/etc/nginx/conf.d/default.conf
                  - ./app/static:/app/app/static
                  - ./app/uploads:/app/app/uploads
                depends_on:
                  - app
                networks:
                  - instagram_network
            
            networks:
              instagram_network:
                driver: bridge
            EOF
            
            # Build and start Docker containers
            echo "Building and starting Docker containers..."
            cd "$WORK_DIR"
            
            # Check for Docker Compose
            if command -v docker-compose &> /dev/null; then
              COMPOSE_CMD="docker-compose"
            else
              COMPOSE_CMD="docker compose"
            fi
            
            # Stop any existing containers
            $COMPOSE_CMD down || true
            
            # Build and start the new containers with increased timeout
            export COMPOSE_HTTP_TIMEOUT=600
            export DOCKER_CLIENT_TIMEOUT=600
            
            # Build with retry mechanism
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            until $COMPOSE_CMD build --no-cache || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Build failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
              sleep 5
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Build failed after $MAX_RETRIES attempts. Exiting."
              exit 1
            fi
            
            # Start containers
            $COMPOSE_CMD up -d
            
            # Give the container time to start
            echo "Waiting for containers to start..."
            sleep 20
            
            # Check container status
            docker ps
            
            if docker ps | grep -q "instagram-app" && docker ps | grep -q "instagram-nginx"; then
              echo "Containers are running successfully."
              
              # Check for any circular import issues and fix them
              echo "Running post-deployment fixes..."
              docker exec instagram-app bash -c 'if [ -f /app/fix_auth.sh ]; then chmod +x /app/fix_auth.sh && /app/fix_auth.sh; fi'
              docker exec instagram-app bash -c 'if [ -f /app/emergency_fix.py ]; then python /app/emergency_fix.py; fi'
              
              echo "Deployment successful!"
            else
              echo "ERROR: Containers failed to start!"
              $COMPOSE_CMD logs
              exit 1
            fi
