name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Updated deployment to use nginx.conf from repository
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "Starting deployment process..."
            
            # Set up working directories
            WORK_DIR="$HOME/fresh_deployment"
            DATA_DIR="$HOME/app_persistent_data"
            
            # Create persistent data directory if it doesn't exist
            mkdir -p "$DATA_DIR/static/images/brand"
            mkdir -p "$DATA_DIR/uploads"
            mkdir -p "$DATA_DIR/data"
            
            # Force proper permissions on data directory
            sudo chown -R $(whoami):$(whoami) "$DATA_DIR"
            chmod -R 777 "$DATA_DIR"
            
            # Clean previous deployment directory
            rm -rf "$WORK_DIR"
            mkdir -p "$WORK_DIR"
            cd "$WORK_DIR"
            
            # Clone repository
            echo "Cloning fresh repository..."
            git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git .
            
            if [ ! -d app ]; then
              echo "ERROR: Repository cloning failed or app directory missing!"
              exit 1
            fi
            
            echo "Repository successfully cloned."
            git log -1 --oneline
            
            # Fix auth.py indentation - Instead of complex heredoc, copy a prepared file
            echo "Fixing auth.py indentation..."
            mkdir -p app/routes
            
            # Create auth.py with proper indentation - using simpler syntax
            echo 'from flask import Blueprint, render_template, redirect, url_for, request, flash, session, current_app' > app/routes/auth.py
            echo 'from flask_login import login_user, logout_user, login_required, current_user' >> app/routes/auth.py
            echo 'from werkzeug.urls import url_parse' >> app/routes/auth.py
            echo '' >> app/routes/auth.py
            echo 'from app.forms import LoginForm, RegistrationForm' >> app/routes/auth.py
            echo 'from app.models.user import User' >> app/routes/auth.py
            echo 'from app.models.history import History' >> app/routes/auth.py
            echo 'from run import db' >> app/routes/auth.py
            echo '' >> app/routes/auth.py
            echo 'auth_bp = Blueprint("auth", __name__)' >> app/routes/auth.py
            echo '' >> app/routes/auth.py
            echo '@auth_bp.route("/login", methods=["GET", "POST"])' >> app/routes/auth.py
            echo 'def login():' >> app/routes/auth.py
            echo '    if current_user.is_authenticated:' >> app/routes/auth.py
            echo '        return redirect(url_for("main.index"))' >> app/routes/auth.py
            echo '    form = LoginForm()' >> app/routes/auth.py
            echo '    if form.validate_on_submit():' >> app/routes/auth.py
            echo '        user = db.session.scalar(db.select(User).where(User.username == form.username.data))' >> app/routes/auth.py
            echo '        if user is None or not user.check_password(form.password.data):' >> app/routes/auth.py
            echo '            flash("Invalid username or password", "danger")' >> app/routes/auth.py
            echo '            return redirect(url_for("auth.login"))' >> app/routes/auth.py
            echo '        login_user(user, remember=form.remember_me.data)' >> app/routes/auth.py
            echo '        flash(f"Welcome back, {user.username}!", "success")' >> app/routes/auth.py
            echo '        next_page = request.args.get("next")' >> app/routes/auth.py
            echo '        if not next_page or url_parse(next_page).netloc != "":' >> app/routes/auth.py
            echo '            next_page = url_for("main.index")' >> app/routes/auth.py
            echo '        return redirect(next_page)' >> app/routes/auth.py
            echo '    return render_template("auth/login.html", title="Sign In", form=form)' >> app/routes/auth.py
            echo '' >> app/routes/auth.py
            echo '@auth_bp.route("/register", methods=["GET", "POST"])' >> app/routes/auth.py
            echo 'def register():' >> app/routes/auth.py
            echo '    if current_user.is_authenticated:' >> app/routes/auth.py
            echo '        return redirect(url_for("main.index"))' >> app/routes/auth.py
            echo '    form = RegistrationForm()' >> app/routes/auth.py
            echo '    if form.validate_on_submit():' >> app/routes/auth.py
            echo '        try:' >> app/routes/auth.py
            echo '            user = User(username=form.username.data, email=form.email.data)' >> app/routes/auth.py
            echo '            user.set_password(form.password.data)' >> app/routes/auth.py
            echo '            db.session.add(user)' >> app/routes/auth.py
            echo '            db.session.commit()' >> app/routes/auth.py
            echo '            flash(f"Congratulations, {user.username}, you are now a registered user!", "success")' >> app/routes/auth.py
            echo '            login_user(user)' >> app/routes/auth.py
            echo '            return redirect(url_for("main.index"))' >> app/routes/auth.py
            echo '        except Exception as e:' >> app/routes/auth.py
            echo '            db.session.rollback()' >> app/routes/auth.py
            echo '            flash("An error occurred during registration. Please try again.", "danger")' >> app/routes/auth.py
            echo '            current_app.logger.error(f"Registration error: {str(e)}")' >> app/routes/auth.py
            echo '    return render_template("auth/register.html", title="Register", form=form)' >> app/routes/auth.py
            echo '' >> app/routes/auth.py
            echo '@auth_bp.route("/logout")' >> app/routes/auth.py
            echo '@login_required' >> app/routes/auth.py
            echo 'def logout():' >> app/routes/auth.py
            echo '    logout_user()' >> app/routes/auth.py
            echo '    flash("You have been logged out.", "info")' >> app/routes/auth.py
            echo '    return redirect(url_for("main.index"))' >> app/routes/auth.py
            
            # Ensure we have a requirements.txt file
            if [ ! -f requirements.txt ]; then
              echo "Creating requirements.txt..."
              echo "Flask==2.0.1" > requirements.txt
              echo "Flask-Login==0.5.0" >> requirements.txt
              echo "Flask-SQLAlchemy==2.5.1" >> requirements.txt
              echo "gunicorn==21.2.0" >> requirements.txt
              echo "ipython==8.18.1" >> requirements.txt
              echo "SQLAlchemy==2.0.4" >> requirements.txt
              echo "Werkzeug==2.0.1" >> requirements.txt
            else
              # Fix ipython version
              sed -i 's/ipython==9.1.0/ipython==8.18.1/g' requirements.txt
            fi
            
            # Copy static files if they exist
            if [ -d app/static ]; then
              echo "Copying static files to persistent data directory..."
              cp -r app/static/* "$DATA_DIR/static/"
            fi
            
            # Ensure logo files exist in data directory
            echo "Checking for logo files..."
            if [ ! -f "$DATA_DIR/static/images/brand/momentro-logo.png" ]; then
              echo "Logo files missing, looking for them in repository..."
              
              # Look for logo files in the repository
              LOGO_FILE=$(find . -name "momentro-logo.png" | head -1)
              if [ -n "$LOGO_FILE" ]; then
                echo "Found logo file at $LOGO_FILE"
                cp "$LOGO_FILE" "$DATA_DIR/static/images/brand/momentro-logo.png"
                cp "$LOGO_FILE" "$DATA_DIR/static/images/brand/momentro_logo.png"
              else
                echo "No logo file found, downloading placeholder image..."
                curl -s https://via.placeholder.com/150 -o "$DATA_DIR/static/images/brand/momentro-logo.png"
                curl -s https://via.placeholder.com/150 -o "$DATA_DIR/static/images/brand/momentro_logo.png"
              fi
            fi
            
            # Ensure proper permissions
            chmod -R 777 "$DATA_DIR"
            
            # Create WSGI file
            echo '#!/usr/bin/env python3' > wsgi.py
            echo 'import os' >> wsgi.py
            echo 'import sys' >> wsgi.py
            echo '' >> wsgi.py
            echo '# Add the current directory to the path' >> wsgi.py
            echo 'sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))' >> wsgi.py
            echo '' >> wsgi.py
            echo '# Import the create_app function from run.py' >> wsgi.py
            echo 'from run import create_app' >> wsgi.py
            echo '' >> wsgi.py
            echo '# Create the application instance' >> wsgi.py
            echo 'application = create_app()' >> wsgi.py
            echo '' >> wsgi.py
            echo '# For Gunicorn' >> wsgi.py
            echo 'app = application' >> wsgi.py
            echo '' >> wsgi.py
            echo 'if __name__ == "__main__":' >> wsgi.py
            echo '    app.run()' >> wsgi.py
            
            # Create Dockerfile.app properly escaped for YAML
            cat << 'EODOCKERFILE' > Dockerfile.app
FROM python:3.10-slim

# Set working directory
WORKDIR /app

# Install dependencies
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install --no-cache-dir gunicorn Flask==2.0.1 Flask-Login==0.5.0 Flask-SQLAlchemy==2.5.1 && \
    pip install --no-cache-dir -r requirements.txt || pip install --no-cache-dir -r requirements.txt --no-deps

# Copy application code
COPY . .

# Expose port
EXPOSE 8000

# Start Gunicorn
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--timeout", "120", "--workers", "3", "--log-level", "info", "wsgi:app"]
EODOCKERFILE
            
            # Create nginx.conf
            echo 'server {' > docker-nginx.conf
            echo '    listen 80;' >> docker-nginx.conf
            echo '    server_name localhost;' >> docker-nginx.conf
            echo '    ' >> docker-nginx.conf
            echo '    # Debug information location' >> docker-nginx.conf
            echo '    location = /debug {' >> docker-nginx.conf
            echo '        add_header Content-Type text/plain;' >> docker-nginx.conf
            echo '        add_header X-Debug-Static "Static files debug page";' >> docker-nginx.conf
            echo '        return 200 "Debug static files";' >> docker-nginx.conf
            echo '    }' >> docker-nginx.conf
            echo '    ' >> docker-nginx.conf
            echo '    # Specific locations for exact logo files' >> docker-nginx.conf
            echo '    location = /static/images/brand/momentro-logo.png {' >> docker-nginx.conf
            echo '        root /usr/share/nginx/html;' >> docker-nginx.conf
            echo '        add_header Content-Type image/png;' >> docker-nginx.conf
            echo '        expires 30d;' >> docker-nginx.conf
            echo '        access_log on;' >> docker-nginx.conf
            echo '    }' >> docker-nginx.conf
            echo '' >> docker-nginx.conf
            echo '    location = /static/images/brand/momentro_logo.png {' >> docker-nginx.conf
            echo '        root /usr/share/nginx/html;' >> docker-nginx.conf
            echo '        add_header Content-Type image/png;' >> docker-nginx.conf
            echo '        expires 30d;' >> docker-nginx.conf
            echo '        access_log on;' >> docker-nginx.conf
            echo '    }' >> docker-nginx.conf
            echo '    ' >> docker-nginx.conf
            echo '    # Serve static files directly' >> docker-nginx.conf
            echo '    location /static/ {' >> docker-nginx.conf
            echo '        root /usr/share/nginx/html;' >> docker-nginx.conf
            echo '        expires 30d;' >> docker-nginx.conf
            echo '        try_files $uri =404;' >> docker-nginx.conf
            echo '        add_header Cache-Control "public, max-age=31536000";' >> docker-nginx.conf
            echo '    }' >> docker-nginx.conf
            echo '    ' >> docker-nginx.conf
            echo '    location /uploads/ {' >> docker-nginx.conf
            echo '        root /usr/share/nginx/html;' >> docker-nginx.conf
            echo '        expires 30d;' >> docker-nginx.conf
            echo '    }' >> docker-nginx.conf
            echo '    ' >> docker-nginx.conf
            echo '    # Everything else to Flask app' >> docker-nginx.conf
            echo '    location / {' >> docker-nginx.conf
            echo '        proxy_pass http://flask-app:8000;' >> docker-nginx.conf
            echo '        proxy_set_header Host $host;' >> docker-nginx.conf
            echo '        proxy_set_header X-Real-IP $remote_addr;' >> docker-nginx.conf
            echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> docker-nginx.conf
            echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> docker-nginx.conf
            echo '    }' >> docker-nginx.conf
            echo '}' >> docker-nginx.conf
            
            # Create docker-compose.yml using heredoc for better variable handling
            cat > docker-compose.yml << EOF
version: '3'

services:
  flask-app:
    container_name: instagram-app
    build:
      context: .
      dockerfile: Dockerfile.app
    restart: unless-stopped
    environment:
      - SECRET_KEY=${{ secrets.SECRET_KEY }}
      - APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}
      - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
    volumes:
      - $DATA_DIR/static:/app/app/static
      - $DATA_DIR/uploads:/app/app/uploads
      - $DATA_DIR/data:/app/app/data
    networks:
      - app-network

  nginx:
    container_name: instagram-nginx
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker-nginx.conf:/etc/nginx/conf.d/default.conf
      - $DATA_DIR/static:/usr/share/nginx/html/static
      - $DATA_DIR/uploads:/usr/share/nginx/html/uploads
    depends_on:
      - flask-app
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
EOF
            
            # Stop and remove any existing containers
            echo "Stopping existing containers..."
            docker stop instagram-app instagram-nginx 2>/dev/null || true
            docker rm instagram-app instagram-nginx 2>/dev/null || true
            
            # Build and start containers
            echo "Building and starting Docker containers..."
            docker-compose down -v 2>/dev/null || true
            docker-compose build --no-cache
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Docker compose build failed!"
              exit 1
            fi
            
            docker-compose up -d
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Docker compose up failed!"
              exit 1
            fi
            
            # Wait for containers to start
            echo "Waiting for containers to start..."
            sleep 15
            
            # Check if containers are running
            docker ps
            
            RUNNING_CONTAINERS=$(docker ps -q --filter name=instagram)
            if [ -z "$RUNNING_CONTAINERS" ]; then
              echo "ERROR: Containers are not running!"
              docker-compose logs
              exit 1
            fi
            
            # Test static file access
            echo "Testing static file access..."
            curl -I localhost/static/images/brand/momentro-logo.png
            
            echo "Deployment completed successfully!" 