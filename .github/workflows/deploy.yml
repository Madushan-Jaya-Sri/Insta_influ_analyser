name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "Starting deployment process..."
            
            # Remove existing directory entirely for a clean start
            rm -rf ~/Insta_influ_analyser
            echo "Removed existing repository directory"
            
            # Fresh clone of the repository
            git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git ~/Insta_influ_analyser
            cd ~/Insta_influ_analyser
            echo "Repository freshly cloned"
            
            # Fix ipython version in requirements.txt
            sed -i 's/ipython==9.1.0/ipython==8.18.1/g' requirements.txt
            
            # Create app static directories
            mkdir -p app/static/images/brand
            
            # Create a simple logo HTML file
            cat > momentro-logo.html << 'EOF'
            <html>
              <head>
                <style>
                  body { 
                    margin: 0; 
                    background: #fff; 
                    width: 300px; 
                    height: 100px; 
                    display: flex; 
                    align-items: center; 
                    justify-content: center; 
                    font-family: Arial, sans-serif;
                  }
                  h1 {
                    color: #833ab4;
                    font-size: 24px;
                  }
                </style>
              </head>
              <body>
                <h1>MOMENTRO</h1>
              </body>
            </html>
            EOF
            
            # Try to install wkhtmltoimage if not available
            if ! which wkhtmltoimage > /dev/null; then
              echo "Installing wkhtmltopdf for image generation..."
              apt-get update && apt-get install -y wkhtmltopdf || true
            fi
            
            # Try to create PNG from HTML file
            if which wkhtmltoimage > /dev/null; then
              echo "Generating logo using wkhtmltoimage..."
              wkhtmltoimage momentro-logo.html app/static/images/brand/momentro-logo.png || echo "Failed to create image"
            fi
            
            # Fallback to a text file if PNG creation failed
            if [ ! -s app/static/images/brand/momentro-logo.png ]; then
              echo "Creating placeholder text logo file..."
              echo "MOMENTRO" > app/static/images/brand/momentro-logo.png
            fi
            
            # Create both variants of the file
            cp app/static/images/brand/momentro-logo.png app/static/images/brand/momentro_logo.png || true
            
            # Create WSGI file
            cat > wsgi.py << 'EOF'
            #!/usr/bin/env python3
            import os
            import sys
            
            # Add the current directory to the path
            sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
            
            # Import the create_app function from run.py
            from run import create_app
            
            # Create the application instance
            application = create_app()
            
            # For Gunicorn
            app = application
            
            if __name__ == "__main__":
                app.run()
            EOF
            
            # Create nginx configuration with better static file handling
            cat > nginx.conf << 'EOF'
            server {
                listen 80;
                server_name localhost;
                
                # Serve static files directly
                location /static/ {
                    alias /app/app/static/;
                    expires 30d;
                }
                
                location /uploads/ {
                    alias /app/app/uploads/;
                    expires 30d;
                }
                
                # Everything else to Flask app
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF
            
            # Create start script
            cat > start.sh << 'EOF'
            #!/bin/bash
            set -e
            
            echo "Starting Nginx..."
            nginx -t
            service nginx start
            
            echo "Setting up static files..."
            cd /app
            
            # Create necessary directories with proper permissions
            mkdir -p app/uploads app/data app/static/images app/static/images/brand
            chmod -R 777 app/uploads app/data app/static/images
            
            # Check logo files (debugging)
            echo "Logo files in container:"
            ls -la app/static/images/brand/
            
            # Create logo files if they don't exist
            if [ ! -s "app/static/images/brand/momentro-logo.png" ]; then
              echo "Creating momentro-logo.png in container..."
              echo "MOMENTRO" > app/static/images/brand/momentro-logo.png
              echo "MOMENTRO" > app/static/images/brand/momentro_logo.png
            fi
            
            # Start Gunicorn
            echo "Starting Gunicorn with Flask application..."
            gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level debug --access-logfile - --error-logfile - wsgi:app
            
            # Keep container running
            tail -f /dev/null
            EOF
            
            chmod +x start.sh
            
            # Create simplified Dockerfile
            cat > Dockerfile.simple << 'EOF'
            FROM python:3.10-slim

            # Install required packages
            RUN apt-get update && apt-get install -y nginx procps grep findutils && rm -rf /var/lib/apt/lists/*

            # Copy Nginx config
            COPY nginx.conf /etc/nginx/conf.d/default.conf
            RUN rm -f /etc/nginx/sites-enabled/default

            # Set working directory
            WORKDIR /app

            # Install dependencies
            COPY requirements.txt .
            RUN pip install --upgrade pip && \
                pip install --no-cache-dir gunicorn Flask==2.0.1 Flask-Login==0.5.0 Flask-SQLAlchemy==2.5.1 && \
                pip install --no-cache-dir -r requirements.txt || pip install --no-cache-dir -r requirements.txt --no-deps

            # Copy application code (excluding static files that will be mounted)
            COPY . .
            
            # Debug static files
            RUN find app/static -type f | sort || true

            # Setup directories
            RUN mkdir -p app/uploads app/data app/static/images/brand && \
                chmod -R 777 app/uploads app/data app/static

            # Setup start script
            COPY start.sh /start.sh
            RUN chmod +x /start.sh

            # Expose port
            EXPOSE 80

            # Run start script
            CMD ["/start.sh"]
            EOF
            
            echo "Building Docker image..."
            # Build Docker image
            docker build -t instagram-analyzer:latest -f Dockerfile.simple .
            
            echo "Stopping and removing existing container if it exists..."
            # Stop and remove existing container
            docker stop instagram-analyzer || true
            docker rm instagram-analyzer || true
            
            echo "Starting new container..."
            # Run new container with ABSOLUTE PATH for static files volume
            docker run -d \
              --name instagram-analyzer \
              -p 80:80 \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e APIFY_API_TOKEN="${{ secrets.APIFY_API_TOKEN }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -v $(realpath app/static/images/brand):/app/app/static/images/brand \
              -v instagram_data:/app/app/data \
              -v instagram_uploads:/app/app/uploads \
              --restart unless-stopped \
              instagram-analyzer:latest
            
            echo "Checking if container is running..."
            # Check if container is running
            docker ps | grep instagram-analyzer
            
            echo "Testing access to the logo..."
            # Test direct access to logo file
            sleep 3
            curl -s http://localhost/static/images/brand/momentro-logo.png | hexdump -C | head
            
            echo "Container logs:"
            # Show logs
            docker logs instagram-analyzer
            
            echo "Cleaning up unused images..."
            # Clean up unused images
            docker image prune -af --filter "until=24h"
            
            echo "Deployment completed." 