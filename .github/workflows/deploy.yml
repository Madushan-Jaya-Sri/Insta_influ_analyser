name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "=========================================================="
            echo "PHASE 1: BUILD SETUP"
            echo "=========================================================="

            # Set up working directories
            WORK_DIR="$HOME/insta_analyzer"
            DATA_DIR="$HOME/insta_analyzer_data"

            # Clean up previous deployment data
            echo "Cleaning previous deployment data..."
            sudo rm -rf "$WORK_DIR"
            mkdir -p "$WORK_DIR"

            # Ensure data directory exists with proper permissions
            sudo mkdir -p "$DATA_DIR/static/images/brand"
            sudo mkdir -p "$DATA_DIR/static/images/profiles"
            sudo mkdir -p "$DATA_DIR/static/images/posts"
            sudo mkdir -p "$DATA_DIR/uploads"
            sudo mkdir -p "$DATA_DIR/data"
            sudo mkdir -p "$DATA_DIR/logs"
            sudo chown -R $(whoami):$(whoami) "$DATA_DIR"
            sudo chmod -R 777 "$DATA_DIR"

            # Clone fresh repository
            cd "$WORK_DIR"
            echo "Cloning repository..."
            git clone https://github.com/Madushan-Jaya-Sri/Insta_influ_analyser.git .
            if [ ! -d app ]; then
              echo "ERROR: Repository cloning failed!"
              exit 1
            fi

            # Create docker-compose.yml for production
            echo "Creating docker-compose.yml..."
            echo 'version: "3.8"' > docker-compose.yml
            echo '' >> docker-compose.yml
            echo 'services:' >> docker-compose.yml
            echo '  web:' >> docker-compose.yml
            echo '    build:' >> docker-compose.yml
            echo '      context: .' >> docker-compose.yml
            echo '      dockerfile: Dockerfile' >> docker-compose.yml
            echo '    restart: unless-stopped' >> docker-compose.yml
            echo '    ports:' >> docker-compose.yml
            echo '      - "80:80"' >> docker-compose.yml
            echo '    volumes:' >> docker-compose.yml
            echo '      - ${HOME}/insta_analyzer_data/static:/app/app/static' >> docker-compose.yml
            echo '      - ${HOME}/insta_analyzer_data/uploads:/app/app/uploads' >> docker-compose.yml
            echo '      - ${HOME}/insta_analyzer_data/data:/app/app/data' >> docker-compose.yml
            echo '      - ${HOME}/insta_analyzer_data/logs:/app/logs' >> docker-compose.yml
            echo '    environment:' >> docker-compose.yml
            echo '      - FLASK_APP=wsgi:application' >> docker-compose.yml
            echo '      - FLASK_ENV=production' >> docker-compose.yml
            echo '      - FLASK_DEBUG=0' >> docker-compose.yml
            echo '      - SECRET_KEY=${SECRET_KEY}' >> docker-compose.yml
            echo '      - OPENAI_API_KEY=${OPENAI_API_KEY}' >> docker-compose.yml
            echo '      - APIFY_API_TOKEN=${APIFY_API_TOKEN}' >> docker-compose.yml
            echo '      - LOG_LEVEL=INFO' >> docker-compose.yml
            echo '      - PYTHONUNBUFFERED=1' >> docker-compose.yml
            echo '    command: /start.sh' >> docker-compose.yml

            # Create .env file with secrets
            echo "Creating .env file..."
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}" >> .env

            # Create nginx.conf file
            echo "Creating nginx.conf file..."
            echo 'server {' > nginx.conf
            echo '    listen 80;' >> nginx.conf
            echo '    server_name localhost;' >> nginx.conf
            echo '' >> nginx.conf
            echo '    # Serve static files directly' >> nginx.conf
            echo '    location /static/ {' >> nginx.conf
            echo '        alias /app/app/static/;' >> nginx.conf
            echo '        expires 30d;' >> nginx.conf
            echo '        try_files $uri =404;' >> nginx.conf
            echo '        add_header Cache-Control "public, max-age=31536000";' >> nginx.conf
            echo '    }' >> nginx.conf
            echo '' >> nginx.conf
            echo '    location /uploads/ {' >> nginx.conf
            echo '        alias /app/app/uploads/;' >> nginx.conf
            echo '        expires 30d;' >> nginx.conf
            echo '    }' >> nginx.conf
            echo '' >> nginx.conf
            echo '    # Proxy to Flask app on port 8001' >> nginx.conf
            echo '    location / {' >> nginx.conf
            echo '        proxy_pass http://127.0.0.1:8001;' >> nginx.conf
            echo '        proxy_set_header Host $host;' >> nginx.conf
            echo '        proxy_set_header X-Real-IP $remote_addr;' >> nginx.conf
            echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> nginx.conf
            echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> nginx.conf
            echo '        proxy_connect_timeout 300s;' >> nginx.conf
            echo '        proxy_read_timeout 300s;' >> nginx.conf
            echo '    }' >> nginx.conf
            echo '}' >> nginx.conf

            # Update start.sh to use port 8001
            echo "Updating start.sh..."
            sed -i 's/--bind 127.0.0.1:8000/--bind 127.0.0.1:8001/g' start.sh
            chmod +x start.sh

            # Create database.py to initialize database
            echo "Creating app/database.py..."
            echo '"""Database initialization module to prevent circular imports."""' > app/database.py
            echo '' >> app/database.py
            echo 'from flask_sqlalchemy import SQLAlchemy' >> app/database.py
            echo 'from flask_migrate import Migrate' >> app/database.py
            echo '' >> app/database.py
            echo '# Initialize extensions without app context' >> app/database.py
            echo 'db = SQLAlchemy()' >> app/database.py
            echo 'migrate = Migrate()' >> app/database.py
            echo '' >> app/database.py
            echo 'def init_db(app):' >> app/database.py
            echo '    """Initialize database with Flask app."""' >> app/database.py
            echo '    db.init_app(app)' >> app/database.py
            echo '    migrate.init_app(app, db)' >> app/database.py
            echo '    ' >> app/database.py
            echo '    # Create all tables' >> app/database.py
            echo '    with app.app_context():' >> app/database.py
            echo '        db.create_all()' >> app/database.py

            echo "=========================================================="
            echo "PHASE 2: BUILD AND DEPLOY"
            echo "=========================================================="

            # Ensure Docker and Docker Compose are installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $(whoami)
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "Installing docker-compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Stop running containers
            echo "Stopping any running containers..."
            docker-compose down || true

            # Build the Docker image
            echo "Building Docker image..."
            docker-compose build --no-cache

            # Start the containers
            echo "Starting Docker containers..."
            docker-compose up -d

            # Verify deployment
            echo "Verifying deployment..."
            sleep 10
            if docker-compose ps | grep -q "Up"; then
              echo "✅ Deployment successful! Application is running at http://13.126.220.175/"
            else
              echo "❌ Deployment failed!"
              docker-compose logs
              exit 1
            fi

            echo "Deployment complete! Your application is now available at http://13.126.220.175/"