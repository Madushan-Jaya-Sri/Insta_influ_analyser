name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Create app directory if it doesn't exist
            mkdir -p ~/Insta_influ_analyser

            # Clone or pull the latest code
            if [ -d "~/Insta_influ_analyser/.git" ]; then
              cd ~/Insta_influ_analyser
              git pull
            else
              git clone https://github.com/madushan-jaya-sri/Insta_influ_analyser.git ~/Insta_influ_analyser
              cd ~/Insta_influ_analyser
            fi
            
            # Fix ipython version in requirements.txt before building
            sed -i 's/ipython==9.1.0/ipython==8.18.1/g' requirements.txt
            
            # Find the correct app module by checking the directory structure
            echo "Checking application structure..."
            ls -la
            
            # Create a better nginx configuration to serve the app
            cat > nginx.conf << 'EOF'
            server {
                listen 80;
                server_name localhost;
                
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                location /static/ {
                    alias /app/app/static/;
                    expires 30d;
                }
                
                location /uploads/ {
                    alias /app/app/uploads/;
                    expires 30d;
                }
            }
            EOF
            
            # Create an improved start script
            cat > start.sh << 'EOF'
            #!/bin/bash
            set -e
            
            echo "Starting Nginx..."
            nginx -t
            service nginx start
            
            echo "Starting Gunicorn with Flask application..."
            cd /app
            
            # Check for Flask app entry point
            if [ -f "run.py" ]; then
              echo "Using run.py as entry point"
              gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level info --access-logfile - --error-logfile - run:app
            elif [ -f "app.py" ]; then
              echo "Using app.py as entry point"
              gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level info --access-logfile - --error-logfile - app:app
            elif [ -f "wsgi.py" ]; then
              echo "Using wsgi.py as entry point"
              gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level info --access-logfile - --error-logfile - wsgi:app
            elif [ -d "app" ]; then
              if [ -f "app/__init__.py" ]; then
                echo "Using app module as entry point"
                gunicorn --bind 127.0.0.1:8000 --timeout 120 --workers 3 --log-level info --access-logfile - --error-logfile - app:app
              fi
            else
              echo "Could not find Flask application entry point"
              exit 1
            fi
            
            # Keep the container running
            tail -f /dev/null
            EOF
            
            chmod +x start.sh

            # Create a simplified Dockerfile for improved compatibility
            cat > Dockerfile.simple << 'EOF'
            FROM python:3.10-slim

            # Install Nginx and required packages
            RUN apt-get update && apt-get install -y nginx procps && rm -rf /var/lib/apt/lists/*

            # Copy Nginx config
            COPY nginx.conf /etc/nginx/conf.d/default.conf
            # Remove default nginx site
            RUN rm -f /etc/nginx/sites-enabled/default

            # Set working directory
            WORKDIR /app

            # Update pip and install dependencies
            COPY requirements.txt .
            RUN pip install --upgrade pip && \
                pip install --no-cache-dir gunicorn Flask==2.0.1 Flask-Login==0.5.0 Flask-SQLAlchemy==2.5.1 && \
                pip install --no-cache-dir -r requirements.txt || pip install --no-cache-dir -r requirements.txt --no-deps

            # Copy application code
            COPY . .

            # Make sure the uploads and data directories exist
            RUN mkdir -p app/uploads app/data app/static/images && \
                chmod -R 777 app/uploads app/data app/static/images

            # Make start script executable
            COPY start.sh /start.sh
            RUN chmod +x /start.sh

            # Expose port
            EXPOSE 80

            # Run start script
            CMD ["/start.sh"]
            EOF
            
            # Build the Docker image using the simplified Dockerfile
            docker build -t instagram-analyzer:latest -f Dockerfile.simple .
            
            # Stop and remove the existing container if it's running
            docker stop instagram-analyzer || true
            docker rm instagram-analyzer || true
            
            # Run the new container with environment variables
            docker run -d \
              --name instagram-analyzer \
              -p 80:80 \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e APIFY_API_TOKEN="${{ secrets.APIFY_API_TOKEN }}" \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -v instagram_data:/app/app/data \
              -v instagram_uploads:/app/app/uploads \
              -v instagram_images:/app/app/static/images \
              --restart unless-stopped \
              instagram-analyzer:latest
            
            # Check if container is running
            docker ps | grep instagram-analyzer
            
            # Show container logs to help with debugging
            sleep 5
            docker logs instagram-analyzer
            
            # Remove unused images to save space
            docker image prune -af --filter "until=24h" 