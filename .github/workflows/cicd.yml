name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-flask
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --extend-ignore=F824 --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest -v

  build-and-deploy:
    name: Build and Deploy to EC2
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Set repository owner to lowercase
      id: repo-owner
      run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/${{ env.REPO_OWNER }}/insta-influencer-analyzer:latest,ghcr.io/${{ env.REPO_OWNER }}/insta-influencer-analyzer:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.AWS_SSH_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
        
    - name: Add to known_hosts
      run: ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Create deployment directory on EC2
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "mkdir -p ~/Insta_influ_analyser/nginx/conf.d ~/Insta_influ_analyser/nginx/ssl"
        
    - name: Copy configuration files to EC2
      run: |
        # Create .env file with secrets
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env.deploy
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.deploy
        echo "APIFY_API_TOKEN=${{ secrets.APIFY_API_TOKEN }}" >> .env.deploy
        echo "FLASK_ENV=production" >> .env.deploy
        echo "DOCKER_IMAGE_TAG=ghcr.io/${{ env.REPO_OWNER }}/insta-influencer-analyzer:${{ github.sha }}" >> .env.deploy
        
        # Copy files to EC2
        scp docker-compose.yml ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/Insta_influ_analyser/
        scp .env.deploy ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/Insta_influ_analyser/.env
        scp nginx/conf.d/insta-analyzer.conf ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/Insta_influ_analyser/nginx/conf.d/
        scp nginx/conf.d/http.conf ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/Insta_influ_analyser/nginx/conf.d/
        scp docker-entrypoint.sh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }}:~/Insta_influ_analyser/
        
    - name: Generate self-signed SSL certificate if needed
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "
          cd ~/Insta_influ_analyser && 
          if [ ! -f nginx/ssl/server.crt ]; then
            mkdir -p nginx/ssl
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout nginx/ssl/server.key -out nginx/ssl/server.crt -subj '/CN=localhost'
            chmod 600 nginx/ssl/server.key
          fi
        "
        
    - name: Deploy to EC2
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "
          cd ~/Insta_influ_analyser &&
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} &&
          docker pull ghcr.io/${{ env.REPO_OWNER }}/insta-influencer-analyzer:${{ github.sha }} &&
          docker-compose down &&
          docker-compose up -d
        "
        
    - name: Verify Deployment
      run: |
        echo "Deployment complete! Verifying service status..."
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "docker-compose ps"
    
    - name: Health Check
      id: health_check
      run: |
        for i in {1..10}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.AWS_HOST }})
          if [ "$response" == "200" ] || [ "$response" == "301" ] || [ "$response" == "302" ]; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Waiting for service to start... attempt $i"
          sleep 20
        done
        echo "Health check failed after 10 attempts"
        exit 1
      continue-on-error: true

    - name: Show logs if health check failed
      if: steps.health_check.outcome == 'failure'
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "
          cd ~/Insta_influ_analyser &&
          docker-compose logs --tail=100
        "

    - name: Rollback if Failed
      if: steps.health_check.outcome == 'failure'
      run: |
        ssh ${{ secrets.AWS_USERNAME }}@${{ secrets.AWS_HOST }} "
          cd ~/Insta_influ_analyser &&
          echo 'Rolling back deployment...' &&
          docker-compose down &&
          docker pull ghcr.io/${{ env.REPO_OWNER }}/insta-influencer-analyzer:latest &&
          docker-compose up -d
        "
